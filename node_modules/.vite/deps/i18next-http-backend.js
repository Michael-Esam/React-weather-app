import { __toDynamicImportESM } from "./chunk-B4p5S3KX.js";

//#region node_modules/i18next-http-backend/esm/utils.js
function _typeof$2(o) {
	"@babel/helpers - typeof";
	return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o$1) {
		return typeof o$1;
	} : function(o$1) {
		return o$1 && "function" == typeof Symbol && o$1.constructor === Symbol && o$1 !== Symbol.prototype ? "symbol" : typeof o$1;
	}, _typeof$2(o);
}
var arr = [];
var each = arr.forEach;
var slice = arr.slice;
function hasXMLHttpRequest() {
	return typeof XMLHttpRequest === "function" || (typeof XMLHttpRequest === "undefined" ? "undefined" : _typeof$2(XMLHttpRequest)) === "object";
}
function isPromise(maybePromise) {
	return !!maybePromise && typeof maybePromise.then === "function";
}
function makePromise(maybePromise) {
	if (isPromise(maybePromise)) return maybePromise;
	return Promise.resolve(maybePromise);
}

//#endregion
//#region node_modules/i18next-http-backend/esm/request.js
function ownKeys$1(e, r) {
	var t = Object.keys(e);
	if (Object.getOwnPropertySymbols) {
		var o = Object.getOwnPropertySymbols(e);
		r && (o = o.filter(function(r$1) {
			return Object.getOwnPropertyDescriptor(e, r$1).enumerable;
		})), t.push.apply(t, o);
	}
	return t;
}
function _objectSpread$1(e) {
	for (var r = 1; r < arguments.length; r++) {
		var t = null != arguments[r] ? arguments[r] : {};
		r % 2 ? ownKeys$1(Object(t), !0).forEach(function(r$1) {
			_defineProperty$1(e, r$1, t[r$1]);
		}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function(r$1) {
			Object.defineProperty(e, r$1, Object.getOwnPropertyDescriptor(t, r$1));
		});
	}
	return e;
}
function _defineProperty$1(e, r, t) {
	return (r = _toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, {
		value: t,
		enumerable: !0,
		configurable: !0,
		writable: !0
	}) : e[r] = t, e;
}
function _toPropertyKey$1(t) {
	var i = _toPrimitive$1(t, "string");
	return "symbol" == _typeof$1(i) ? i : i + "";
}
function _toPrimitive$1(t, r) {
	if ("object" != _typeof$1(t) || !t) return t;
	var e = t[Symbol.toPrimitive];
	if (void 0 !== e) {
		var i = e.call(t, r || "default");
		if ("object" != _typeof$1(i)) return i;
		throw new TypeError("@@toPrimitive must return a primitive value.");
	}
	return ("string" === r ? String : Number)(t);
}
function _typeof$1(o) {
	"@babel/helpers - typeof";
	return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o$1) {
		return typeof o$1;
	} : function(o$1) {
		return o$1 && "function" == typeof Symbol && o$1.constructor === Symbol && o$1 !== Symbol.prototype ? "symbol" : typeof o$1;
	}, _typeof$1(o);
}
var fetchApi = typeof fetch === "function" ? fetch : void 0;
if (typeof global !== "undefined" && global.fetch) fetchApi = global.fetch;
else if (typeof window !== "undefined" && window.fetch) fetchApi = window.fetch;
var XmlHttpRequestApi;
if (hasXMLHttpRequest()) {
	if (typeof global !== "undefined" && global.XMLHttpRequest) XmlHttpRequestApi = global.XMLHttpRequest;
	else if (typeof window !== "undefined" && window.XMLHttpRequest) XmlHttpRequestApi = window.XMLHttpRequest;
}
var ActiveXObjectApi;
if (typeof ActiveXObject === "function") {
	if (typeof global !== "undefined" && global.ActiveXObject) ActiveXObjectApi = global.ActiveXObject;
	else if (typeof window !== "undefined" && window.ActiveXObject) ActiveXObjectApi = window.ActiveXObject;
}
if (typeof fetchApi !== "function") fetchApi = void 0;
if (!fetchApi && !XmlHttpRequestApi && !ActiveXObjectApi) try {
	import("./browser-ponyfill-C7mD5ct3.js").then(__toDynamicImportESM(1)).then(function(mod) {
		fetchApi = mod.default;
	}).catch(function() {});
} catch (e) {}
var addQueryString = function addQueryString$1(url, params) {
	if (params && _typeof$1(params) === "object") {
		var queryString = "";
		for (var paramName in params) queryString += "&" + encodeURIComponent(paramName) + "=" + encodeURIComponent(params[paramName]);
		if (!queryString) return url;
		url = url + (url.indexOf("?") !== -1 ? "&" : "?") + queryString.slice(1);
	}
	return url;
};
var fetchIt = function fetchIt$1(url, fetchOptions, callback, altFetch) {
	var resolver = function resolver$1(response) {
		if (!response.ok) return callback(response.statusText || "Error", { status: response.status });
		response.text().then(function(data) {
			callback(null, {
				status: response.status,
				data
			});
		}).catch(callback);
	};
	if (altFetch) {
		var altResponse = altFetch(url, fetchOptions);
		if (altResponse instanceof Promise) {
			altResponse.then(resolver).catch(callback);
			return;
		}
	}
	if (typeof fetch === "function") fetch(url, fetchOptions).then(resolver).catch(callback);
	else fetchApi(url, fetchOptions).then(resolver).catch(callback);
};
var omitFetchOptions = false;
var requestWithFetch = function requestWithFetch$1(options, url, payload, callback) {
	if (options.queryStringParams) url = addQueryString(url, options.queryStringParams);
	var headers = _objectSpread$1({}, typeof options.customHeaders === "function" ? options.customHeaders() : options.customHeaders);
	if (typeof window === "undefined" && typeof global !== "undefined" && typeof global.process !== "undefined" && global.process.versions && global.process.versions.node) headers["User-Agent"] = "i18next-http-backend (node/".concat(global.process.version, "; ").concat(global.process.platform, " ").concat(global.process.arch, ")");
	if (payload) headers["Content-Type"] = "application/json";
	var reqOptions = typeof options.requestOptions === "function" ? options.requestOptions(payload) : options.requestOptions;
	var fetchOptions = _objectSpread$1({
		method: payload ? "POST" : "GET",
		body: payload ? options.stringify(payload) : void 0,
		headers
	}, omitFetchOptions ? {} : reqOptions);
	var altFetch = typeof options.alternateFetch === "function" && options.alternateFetch.length >= 1 ? options.alternateFetch : void 0;
	try {
		fetchIt(url, fetchOptions, callback, altFetch);
	} catch (e) {
		if (!reqOptions || Object.keys(reqOptions).length === 0 || !e.message || e.message.indexOf("not implemented") < 0) return callback(e);
		try {
			Object.keys(reqOptions).forEach(function(opt) {
				delete fetchOptions[opt];
			});
			fetchIt(url, fetchOptions, callback, altFetch);
			omitFetchOptions = true;
		} catch (err) {
			callback(err);
		}
	}
};
var requestWithXmlHttpRequest = function requestWithXmlHttpRequest$1(options, url, payload, callback) {
	if (payload && _typeof$1(payload) === "object") payload = addQueryString("", payload).slice(1);
	if (options.queryStringParams) url = addQueryString(url, options.queryStringParams);
	try {
		var x = XmlHttpRequestApi ? new XmlHttpRequestApi() : new ActiveXObjectApi("MSXML2.XMLHTTP.3.0");
		x.open(payload ? "POST" : "GET", url, 1);
		if (!options.crossDomain) x.setRequestHeader("X-Requested-With", "XMLHttpRequest");
		x.withCredentials = !!options.withCredentials;
		if (payload) x.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
		if (x.overrideMimeType) x.overrideMimeType("application/json");
		var h = options.customHeaders;
		h = typeof h === "function" ? h() : h;
		if (h) for (var i in h) x.setRequestHeader(i, h[i]);
		x.onreadystatechange = function() {
			x.readyState > 3 && callback(x.status >= 400 ? x.statusText : null, {
				status: x.status,
				data: x.responseText
			});
		};
		x.send(payload);
	} catch (e) {
		console && console.log(e);
	}
};
var request = function request$1(options, url, payload, callback) {
	if (typeof payload === "function") {
		callback = payload;
		payload = void 0;
	}
	callback = callback || function() {};
	if (fetchApi && url.indexOf("file:") !== 0) return requestWithFetch(options, url, payload, callback);
	if (hasXMLHttpRequest() || typeof ActiveXObject === "function") return requestWithXmlHttpRequest(options, url, payload, callback);
	callback(/* @__PURE__ */ new Error("No fetch and no xhr implementation found!"));
};
var request_default = request;

//#endregion
//#region node_modules/i18next-http-backend/esm/index.js
function _typeof(o) {
	"@babel/helpers - typeof";
	return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o$1) {
		return typeof o$1;
	} : function(o$1) {
		return o$1 && "function" == typeof Symbol && o$1.constructor === Symbol && o$1 !== Symbol.prototype ? "symbol" : typeof o$1;
	}, _typeof(o);
}
function ownKeys(e, r) {
	var t = Object.keys(e);
	if (Object.getOwnPropertySymbols) {
		var o = Object.getOwnPropertySymbols(e);
		r && (o = o.filter(function(r$1) {
			return Object.getOwnPropertyDescriptor(e, r$1).enumerable;
		})), t.push.apply(t, o);
	}
	return t;
}
function _objectSpread(e) {
	for (var r = 1; r < arguments.length; r++) {
		var t = null != arguments[r] ? arguments[r] : {};
		r % 2 ? ownKeys(Object(t), !0).forEach(function(r$1) {
			_defineProperty(e, r$1, t[r$1]);
		}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r$1) {
			Object.defineProperty(e, r$1, Object.getOwnPropertyDescriptor(t, r$1));
		});
	}
	return e;
}
function _classCallCheck(a, n) {
	if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(e, r) {
	for (var t = 0; t < r.length; t++) {
		var o = r[t];
		o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
	}
}
function _createClass(e, r, t) {
	return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function _defineProperty(e, r, t) {
	return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
		value: t,
		enumerable: !0,
		configurable: !0,
		writable: !0
	}) : e[r] = t, e;
}
function _toPropertyKey(t) {
	var i = _toPrimitive(t, "string");
	return "symbol" == _typeof(i) ? i : i + "";
}
function _toPrimitive(t, r) {
	if ("object" != _typeof(t) || !t) return t;
	var e = t[Symbol.toPrimitive];
	if (void 0 !== e) {
		var i = e.call(t, r || "default");
		if ("object" != _typeof(i)) return i;
		throw new TypeError("@@toPrimitive must return a primitive value.");
	}
	return ("string" === r ? String : Number)(t);
}
var getDefaults = function getDefaults$1() {
	return {
		loadPath: "/locales/{{lng}}/{{ns}}.json",
		addPath: "/locales/add/{{lng}}/{{ns}}",
		parse: function parse(data) {
			return JSON.parse(data);
		},
		stringify: JSON.stringify,
		parsePayload: function parsePayload(namespace, key, fallbackValue) {
			return _defineProperty({}, key, fallbackValue || "");
		},
		parseLoadPayload: function parseLoadPayload(languages, namespaces) {},
		request: request_default,
		reloadInterval: typeof window !== "undefined" ? false : 3600 * 1e3,
		customHeaders: {},
		queryStringParams: {},
		crossDomain: false,
		withCredentials: false,
		overrideMimeType: false,
		requestOptions: {
			mode: "cors",
			credentials: "same-origin",
			cache: "default"
		}
	};
};
var Backend = function() {
	function Backend$1(services) {
		var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
		var allOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
		_classCallCheck(this, Backend$1);
		this.services = services;
		this.options = options;
		this.allOptions = allOptions;
		this.type = "backend";
		this.init(services, options, allOptions);
	}
	return _createClass(Backend$1, [
		{
			key: "init",
			value: function init(services) {
				var _this = this;
				var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
				var allOptions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
				this.services = services;
				this.options = _objectSpread(_objectSpread(_objectSpread({}, getDefaults()), this.options || {}), options);
				this.allOptions = allOptions;
				if (this.services && this.options.reloadInterval) {
					var timer = setInterval(function() {
						return _this.reload();
					}, this.options.reloadInterval);
					if (_typeof(timer) === "object" && typeof timer.unref === "function") timer.unref();
				}
			}
		},
		{
			key: "readMulti",
			value: function readMulti(languages, namespaces, callback) {
				this._readAny(languages, languages, namespaces, namespaces, callback);
			}
		},
		{
			key: "read",
			value: function read(language, namespace, callback) {
				this._readAny([language], language, [namespace], namespace, callback);
			}
		},
		{
			key: "_readAny",
			value: function _readAny(languages, loadUrlLanguages, namespaces, loadUrlNamespaces, callback) {
				var _this2 = this;
				var loadPath = this.options.loadPath;
				if (typeof this.options.loadPath === "function") loadPath = this.options.loadPath(languages, namespaces);
				loadPath = makePromise(loadPath);
				loadPath.then(function(resolvedLoadPath) {
					if (!resolvedLoadPath) return callback(null, {});
					var url = _this2.services.interpolator.interpolate(resolvedLoadPath, {
						lng: languages.join("+"),
						ns: namespaces.join("+")
					});
					_this2.loadUrl(url, callback, loadUrlLanguages, loadUrlNamespaces);
				});
			}
		},
		{
			key: "loadUrl",
			value: function loadUrl(url, callback, languages, namespaces) {
				var _this3 = this;
				var lng = typeof languages === "string" ? [languages] : languages;
				var ns = typeof namespaces === "string" ? [namespaces] : namespaces;
				var payload = this.options.parseLoadPayload(lng, ns);
				this.options.request(this.options, url, payload, function(err, res) {
					if (res && (res.status >= 500 && res.status < 600 || !res.status)) return callback("failed loading " + url + "; status code: " + res.status, true);
					if (res && res.status >= 400 && res.status < 500) return callback("failed loading " + url + "; status code: " + res.status, false);
					if (!res && err && err.message) {
						var errorMessage = err.message.toLowerCase();
						if ([
							"failed",
							"fetch",
							"network",
							"load"
						].find(function(term) {
							return errorMessage.indexOf(term) > -1;
						})) return callback("failed loading " + url + ": " + err.message, true);
					}
					if (err) return callback(err, false);
					var ret, parseErr;
					try {
						if (typeof res.data === "string") ret = _this3.options.parse(res.data, languages, namespaces);
						else ret = res.data;
					} catch (e) {
						parseErr = "failed parsing " + url + " to json";
					}
					if (parseErr) return callback(parseErr, false);
					callback(null, ret);
				});
			}
		},
		{
			key: "create",
			value: function create(languages, namespace, key, fallbackValue, callback) {
				var _this4 = this;
				if (!this.options.addPath) return;
				if (typeof languages === "string") languages = [languages];
				var payload = this.options.parsePayload(namespace, key, fallbackValue);
				var finished = 0;
				var dataArray = [];
				var resArray = [];
				languages.forEach(function(lng) {
					var addPath = _this4.options.addPath;
					if (typeof _this4.options.addPath === "function") addPath = _this4.options.addPath(lng, namespace);
					var url = _this4.services.interpolator.interpolate(addPath, {
						lng,
						ns: namespace
					});
					_this4.options.request(_this4.options, url, payload, function(data, res) {
						finished += 1;
						dataArray.push(data);
						resArray.push(res);
						if (finished === languages.length) {
							if (typeof callback === "function") callback(dataArray, resArray);
						}
					});
				});
			}
		},
		{
			key: "reload",
			value: function reload() {
				var _this5 = this;
				var _this$services = this.services, backendConnector = _this$services.backendConnector, languageUtils = _this$services.languageUtils, logger = _this$services.logger;
				var currentLanguage = backendConnector.language;
				if (currentLanguage && currentLanguage.toLowerCase() === "cimode") return;
				var toLoad = [];
				var append = function append$1(lng) {
					languageUtils.toResolveHierarchy(lng).forEach(function(l) {
						if (toLoad.indexOf(l) < 0) toLoad.push(l);
					});
				};
				append(currentLanguage);
				if (this.allOptions.preload) this.allOptions.preload.forEach(function(l) {
					return append(l);
				});
				toLoad.forEach(function(lng) {
					_this5.allOptions.ns.forEach(function(ns) {
						backendConnector.read(lng, ns, "read", null, null, function(err, data) {
							if (err) logger.warn("loading namespace ".concat(ns, " for language ").concat(lng, " failed"), err);
							if (!err && data) logger.log("loaded namespace ".concat(ns, " for language ").concat(lng), data);
							backendConnector.loaded("".concat(lng, "|").concat(ns), err, data);
						});
					});
				});
			}
		}
	]);
}();
Backend.type = "backend";
var esm_default = Backend;

//#endregion
export { esm_default as default };
//# sourceMappingURL=i18next-http-backend.js.map